#!/bin/bash

num=0
red='\033[1;31m'
green='\033[1;32m'
nc='\033[0m'

./build/teufel.integrate_field; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.bunch; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.magnet; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.undulator; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.loop; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.EcrossB; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.electrostatic; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.RadPush; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel.diffraction; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

./build/teufel examples/undulator_matching.xml
./tests/test.matching.py; rc=$?
num=$(($num + $rc))

echo ''
echo '==============================================================================='
echo ''

# this test does nothing but check if the code runs with parallel resource usage
# either we compare to known results or we skip it

# mpiexec -n 2 ./build/teufel examples/elbe-u300.xml; rc=$?
# if [ $rc = "0" ]
# then
#     echo -e "$green OK.$nc"
# else
#     echo -e "$red Error.$nc"
# num=$(($num + $rc))
# fi

# echo ''
# echo '==============================================================================='
# echo ''

# this test runs very long and also does no comparison to known values

# ./build/reflection tests/DiffractionScreenWithFields.h5 tests/BackwardDiffractionScreen.h5 tests/BackwardDiffractionFields.h5; rc=$?
# if [ $rc = "0" ]
# then
#     echo -e "$green OK.$nc"
# else
#     echo -e "$red Error.$nc"
# num=$(($num + $rc))
# fi

# echo ''
# echo '==============================================================================='
# echo ''

# this test serves as a reference for the fel1d test case

./build/teufel tests/fel_modulation.xml; rc=$?
if [ $rc = "0" ]
then
    ./tests/test.fel-modulation.py; rc=$?
    num=$(($num + $rc))
else
    echo -e "$red Error.$nc"
    num=$(($num+"1"))
fi

echo ''
echo '==============================================================================='
echo ''

# the fel1d interaction has bee removed
# this needs to be replaced with a crs2d test case

# ./build/teufel tests/fel1d_modulation.xml; rc=$?
# if [ $rc = "0" ]
# then
#     ./tests/test.fel-modulation.py; rc=$?
#     num=$(($num + $rc))
# else
#     echo -e "$red Error.$nc"
#     num=$(($num+"1"))
# fi

# echo ''
# echo '==============================================================================='
# echo ''

if [ $num = "0" ]
then
    echo -e "$green no errors - all tests passed.$nc"
else
    echo -e "$red there were " $num " errors - some test failed!$nc"
fi

