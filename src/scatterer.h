/*=========================================================================
 * 
 *  Program:   TEUFEL - THz Emission from Undulators and Free-Electron Lasers
 * 
 *  Copyright (c) 2019 U. Lehnert
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * =========================================================================*/

#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>

#include "global.h"
#include "fields.h"
#include "vector.h"
#include "bunch.h"
#include "beam.h"

/*!
 * \class Scatterer
 * \brief An scatterer of fields generated by tracked particles.
 * @author Ulf Lehnert
 * @date 8.8.2019
 * 
 * This class is intended to simulate metallic surfaces scattering the electromagnetic fields
 * radiated by the tracked particles.
 *
 * Metallic surfaces are simulated with small planar patches of perfect electric conductors.
 * Such a scatterer stores the currents and charges generated by the impinging electromagnetic fields.
 * These in turn produce radiation which is emitted.
 * For simulating real structures a (large) number of such scatteres has to be used.
 */
class Scatterer : public GeneralField
{

public:

    /*! Default constructor with no functionality. */
    Scatterer();

    /*!
     * Destructor
     */
    virtual ~Scatterer();
    
    /*!
     * The electromagnetic field at a given time and point in space.
     * 
     * The coordinates [m] and the time [s] refer to the laboratory (rest) frame.
     * The field is returned as a tuple of electric field [V/m] and
     * magnetic field [T] vectors.
     */
    virtual ElMagField Field(double t, Vector X);

    /*!
     *  Before a scatterer can produce any fields the input fields must be known.
     *  This method gathers the impinging fields generated by the specified objects.
     *
     * \param[in] src The source generating the field.
     *
     *  This method is defined for Beam(), Bunch() and Lattice() as field sources.
     */
    virtual void integrate(Beam *src);
    virtual void integrate(Bunch *src);
    virtual void integrate(Lattice *src);

};

