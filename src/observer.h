/*=========================================================================
 * 
 *  Program:   TEUFEL - THz Emission from Undulators and Free-Electron Lasers
 * 
 *  Copyright (c) 2017 U. Lehnert
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * =========================================================================*/

#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>

#include "beam.h"
#include "bunch.h"
#include "global.h"
#include "fields.h"
#include "vector.h"


/*! Observers can record fields from different sources
*/
enum RadSourceType { LatticeObservation, BeamObservation };

/*! We need a non-templated base class for all observers
 *  in order to be able to keep a list
 */
class BaseObserver {
public:

    /*!
     * The destructor must be overridden by derived classes.
     */
    virtual ~BaseObserver() {};

    /*!
     *  This is the actual observation calculation.
     *  It will be specified in the templated derived classes for different source types.
     */
    virtual void integrate() = 0;

    //! set the source of the fiels to be recorded
    void setSourceType(RadSourceType s) { source_type = s; };
    
    /*! report the source of the fiels to be recorded
     *  if not overridden this is the beam
     */
    RadSourceType getSourceType() { return source_type; };

    /*! The method gives the size of the buffer necessary to store
     *  the complete field information as a number of doubles (not bytes!).
     *  This is a purely virtual method that must be overwritten by derived objects.
     */
    virtual std::size_t getBufferSize() = 0;
    
    /*! Return all field values in a newly allocated buffer.
     *  Memory for the buffer is allocated by this method and must be freed
     *  by the caller. Returns a pointer to the allocated memory.
     *  An exception is thrown if the alloaction of the buffer fails.
     *  This is a purely virtual method that must be overwritten by derived objects.
     */
    virtual double* getBuffer() = 0;

    /*! Set all field values from a given allocated buffer.
     *  The count value gives the size of the buffer as a number of doubles.
     *  An exception is thrown if it doesn't match the actual field size.
     *  This is a purely virtual method that must be overwritten by derived objects.
     */
    virtual void fromBuffer(double *buffer, std::size_t size) = 0;

    /*!
     *  Generate whatever output the special observer has to deliver.
     *  This is a purely virtual method that must be overwritten by derived objects.
     */
    virtual void generateOutput() = 0;

protected :

    RadSourceType source_type;

};


/*!
 * \class Observer
 * \brief An general observer of field generated by tracked particles.
 * @author Ulf Lehnert
 * @date 17.5.2018
 * 
 * This class is intended to be a template for all electromagnetic fields
 * handled in this software. Any field derived from this class can be used
 * for tracking particles. It is purely virtual - no implementation is provided.
 *
 * The origin of the observed fields is provided with a templated class type.
 * Implementation should be done for Beam, Bunch and Lattice as sources.
 */
template <typename SourceT>
class Observer : public BaseObserver
{

public:

    /*! Default constructor with only defaults. */
    Observer() {
        source_type=BeamObservation;
    };

    /*!
     * The destructor must be overridden by derived classes.
     */
    virtual ~Observer() {};
    
    /*!
     *  Set the actual source from which observed fields are computed.
     *  It is specified for Beam(), Bunch() and Lattice() as field sources.
     */
    virtual void setSource(SourceT *src) { source = src; };

    /*!
     *  Integrate the observed fields along the tracked trajectories.
     *  This is a purely virtual method that must be overwritten by derived objects.
     *  It will be specified for Beam(), Bunch() and Lattice() as field sources.
     *  Before this method can be called, the actual source must be set with setSource().
     */
    virtual void integrate() = 0;
    
public:

    SourceT *source;

};

